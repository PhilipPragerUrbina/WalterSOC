// Generate display signals
//Reference: https://projectf.io/posts/display-signals/
module DisplayGenerator # (
    //Specify display timings here as specified by CTA standard(480p default)
    //Examples: https://projectf.io/posts/video-timings-vga-720p-1080p/
    WIDTH=640, //horizontal resolution in pixels
    HEIGHT=480, //vertical resolution in pixels
    X_FRONT_PORCH=16, //horizontal front porch
    X_BACK_PORCH =48, //horizontal back porch
    X_SYNC=96, //horizontal sync
    Y_FRONT_PORCH=10, //vertical front porch
    Y_BACK_PORCH=33, //vertical back porch
    Y_SYNC=2, //vertical sync
    X_SYNC_POLARITY=0, //horizontal sync polarity 0=negative
    Y_SYNC_POLARITY=0 //vertical sync polarity 0=negative
) (
    // Equation(MHz): width(including blanking) * height(including blanking) * refresh_rate / 1000000
    input logic dot_clk, //Clock generated by PLL for this resolution.
    input logic rst, //reset display
    
    //Coordinates are 16 bit and are signed.
    // (0,0) is start of visible screen. Negative coordinates are in the blanking interval.
    output logic signed [15:0] x, //current screen x coordinate. 
    output logic signed [15:0] y, //current screen y coordinate. 

    output logic hsync, //horizontal sync
    output logic vsync, //vertical sync
    output logic de, //data enable. Low when in blanking interval.

    output logic frame_start, //High when a new active frame is starting
    output logic line_start //High when a new active line is starting
);
//All blanking intervals are combined and negative

localparam X_MIN = 0 - X_FRONT_PORCH - X_SYNC - X_BACK_PORCH;
localparam X_MAX = WIDTH -1;
localparam Y_MIN = 0 - Y_FRONT_PORCH - Y_SYNC - Y_BACK_PORCH;
localparam Y_MAX = HEIGHT -1;

localparam X_SYNC_MIN = X_MIN + X_FRONT_PORCH;
localparam X_SYNC_MAX = X_SYNC_MIN + X_SYNC;
localparam Y_SYNC_MIN = Y_MIN + Y_FRONT_PORCH;
localparam Y_SYNC_MAX = Y_SYNC_MIN + Y_SYNC;

localparam X_ACTIVE_MIN = 0;
localparam Y_ACTIVE_MIN = 0;

logic signed [15:0] x_reg, y_reg; //coordinate registers

//Check if in sync
always_ff @(posedge dot_clk) begin
    if (rst) begin
        hsync <= X_SYNC_POLARITY ? 0 : 1;
        vsync <= Y_SYNC_POLARITY ? 0 : 1;
    end else begin
        hsync <= X_SYNC_POLARITY ? (x_reg > X_SYNC_MIN && x_reg <= X_SYNC_MAX) : ~(x_reg > X_SYNC_MIN && x_reg <= X_SYNC_MAX);
        vsync <= Y_SYNC_POLARITY ? (y_reg > Y_SYNC_MIN && y_reg <= Y_SYNC_MAX) : ~(y_reg > Y_SYNC_MIN && y_reg <= Y_SYNC_MAX);
    end
end

//Check if in blanking
always_ff @(posedge dot_clk) begin
    if (rst) begin
        de <= 0;
        frame_start <= 0;
        line_start <= 0;
    end else begin
        de   <= (x_reg >= X_ACTIVE_MIN && y_reg >= Y_ACTIVE_MIN);
        frame_start <= (y_reg == Y_ACTIVE_MIN  && x_reg == X_ACTIVE_MIN);
        line_start  <= (x_reg == X_ACTIVE_MIN);
    end
end

//Increment coordinates
always_ff @(posedge dot_clk) begin
    if (rst) begin
        x_reg <= X_MIN;
        y_reg <= Y_MIN;
    end else begin
        x_reg <= x_reg + 1;
        if(x_reg == X_MAX) begin
            x_reg <= X_MIN;
            y_reg <= (y_reg == Y_MAX) ? Y_MIN : y_reg + 1;
        end
    end
end

//Propagate outputs
always_ff @(posedge dot_clk) begin
    if (rst) begin
        x <= X_MIN;
        y <= Y_MIN;
    end else begin
        x <= x_reg;
        y <= y_reg;
    end
end
endmodule